import 'package:http/http.dart' as http;
import 'dart:convert';
import '../models/utilisateur.dart';
import '../models/casier.dart';
import '../models/creneau.dart';
import '../models/reservation.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ApiService {
  const ApiService();
  static const String _baseUrl = 'https://gymtech-api.onrender.com'; // serveur en ligne
  //static const String _baseUrl = 'http://192.168.1.11:3002/api'; // Adresse IP locale

  String get baseUrl => _baseUrl;

  // M√©thodes pour les utilisateurs
  Future<List<Utilisateur>> getUtilisateurs() async {
    final response = await http.get(Uri.parse('$baseUrl/api/utilisateurs'));

    if (response.statusCode == 200) {
      List jsonResponse = json.decode(response.body);
      return jsonResponse.map((user) => Utilisateur.fromJson(user)).toList();
    } else {
      throw Exception('Erreur lors de la r√©cup√©ration des utilisateurs');
    }
  }

  Future<Utilisateur> getUtilisateurById(int id) async {
    final response = await http.get(Uri.parse('$baseUrl/api/utilisateurs/$id'));

    if (response.statusCode == 200) {
      return Utilisateur.fromJson(json.decode(response.body));
    } else {
      throw Exception("Erreur lors de la r√©cup√©ration de l'utilisateur");
    }
  }

  Future<void> createUser(Utilisateur utilisateur) async {
    final response = await http.post(
      Uri.parse('$baseUrl/api/utilisateurs'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode(utilisateur.toJson()),
    );

    if (response.statusCode != 201) {
      throw Exception('Erreur lors de la cr√©ation de l\'utilisateur');
    }
  }

  Future<void> updateUser(Utilisateur utilisateur) async {
    final response = await http.put(
      Uri.parse('$baseUrl/api/utilisateurs/${utilisateur.id}'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode(utilisateur.toJson()),
    );

    if (response.statusCode != 200) {
      throw Exception('Erreur lors de la mise √† jour de l\'utilisateur');
    }
  }

  Future<void> deleteUser(int id) async {
    final response = await http.delete(Uri.parse('$baseUrl/api/utilisateurs/$id'));

    if (response.statusCode != 200) {
      throw Exception('Erreur lors de la suppression de l\'utilisateur');
    }
  }

  // M√©thodes pour les casiers
  Future<List<Casier>> getCasiers() async {
    final response = await http.get(Uri.parse('$baseUrl/api/casiers'));

    if (response.statusCode == 200) {
      List jsonResponse = json.decode(response.body);
      return jsonResponse.map((casier) => Casier.fromJson(casier)).toList();
    } else {
      throw Exception('Erreur lors de la r√©cup√©ration des casiers');
    }
  }

  Future<Casier> getCasierById(int id) async {
    final response = await http.get(Uri.parse('$baseUrl/api/casiers/$id'));

    if (response.statusCode == 200) {
      return Casier.fromJson(json.decode(response.body));
    } else {
      throw Exception('Erreur lors de la r√©cup√©ration du casier');
    }
  }

  Future<void> updateCasier(Casier casier) async {
    final response = await http.put(
      Uri.parse('$baseUrl/api/casiers/${casier.id}'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode(casier.toJson()),
    );

    if (response.statusCode != 200) {
      throw Exception('Erreur lors de la mise √† jour du casier');
    }
  }

  // M√©thodes pour les cr√©neaux
  Future<List<Creneau>> getCreneaux() async {
    final response = await http.get(Uri.parse('$baseUrl/api/creneaux'));

    if (response.statusCode == 200) {
      List jsonResponse = json.decode(response.body);
      return jsonResponse.map((creneau) => Creneau.fromJson(creneau)).toList();
    } else {
      throw Exception('Erreur lors de la r√©cup√©ration des cr√©neaux');
    }
  }

  Future<Creneau> getCreneauById(int id) async {
    final response = await http.get(Uri.parse('$baseUrl/api/creneaux/$id'));

    if (response.statusCode == 200) {
      return Creneau.fromJson(json.decode(response.body));
    } else {
      throw Exception('Erreur lors de la r√©cup√©ration du cr√©neau');
    }
  }

  Future<void> createReservation(int utilisateurId, int creneauId) async {
    final response = await http.post(
      Uri.parse('$baseUrl/api/reservations'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'id_utilisateur': utilisateurId,
        'id_creneau': creneauId,
      }),
    );

    if (response.statusCode != 201) {
      throw Exception('Erreur lors de la cr√©ation de la r√©servation');
    }
  }

  // M√©thode pour mettre √† jour la disponibilit√© d'un cr√©neau
  Future<void> updateCreneauDisponibilite(int creneauId, bool disponible) async {
    final response = await http.put(
      Uri.parse('$baseUrl/api/creneaux/$creneauId/availability'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'disponibilite': disponible ? 1 : 0,
      }),
    );

    if (response.statusCode != 200) {
      throw Exception('Erreur lors de la mise √† jour de la disponibilit√© du cr√©neau');
    }
  }

  // R√©cup√©rer les r√©servations d'un utilisateur
  Future<List<Reservation>> getMesReservations(int utilisateurId) async {
    try {
      print('üîµ R√©cup√©ration des r√©servations pour l\'utilisateur ID: $utilisateurId');
      
      // R√©cup√©rer le token depuis les pr√©f√©rences partag√©es
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('auth_token');
      
      if (token == null) {
        print('‚ùå Token d\'authentification manquant dans SharedPreferences');
        throw Exception('Token d\'authentification manquant');
      }
      
      print('üîë Token r√©cup√©r√© avec succ√®s');
      
      final response = await http.get(
        Uri.parse('$baseUrl/api/reservations/utilisateur/$utilisateurId'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
      );
      
      print('üìä Statut de la r√©ponse: ${response.statusCode}');
      print('üì¶ En-t√™tes de la r√©ponse: ${response.headers}');
      print('üìä Statut de la r√©ponse: ${response.statusCode}');
      print('üì¶ Corps de la r√©ponse: ${response.body}');

      if (response.statusCode == 200) {
        final jsonResponse = json.decode(response.body);
        
        // Si la r√©ponse est une liste de cr√©neaux (format actuel de l'API)
        if (jsonResponse is List) {
          print('‚ÑπÔ∏è Format de r√©ponse d√©tect√©: Liste de cr√©neaux');
          
          // G√©n√©rer un ID unique pour chaque r√©servation (temporaire, √† remplacer par un vrai ID si disponible)
          int tempId = 1;
          
          return jsonResponse.map<Reservation>((item) {
            try {
              print('üìù Traitement du cr√©neau: $item');
              
              // V√©rifier si c'est un cr√©neau valide
              if (item is Map<String, dynamic> && item.containsKey('creneau')) {
                final creneau = item['creneau'];
                return Reservation(
                  id: tempId++, // ID temporaire
                  idUtilisateur: utilisateurId,
                  idCreneau: 0, // Non disponible dans la r√©ponse actuelle
                  dateReservation: creneau['date_creneau'] != null 
                      ? DateTime.tryParse(creneau['date_creneau'].toString()) ?? DateTime.now()
                      : DateTime.now(),
                  creneau: Creneau(
                    id: 0, // Non disponible dans la r√©ponse actuelle
                    date: creneau['date_creneau']?.toString() ?? '',
                    heureDebut: creneau['heure_debut']?.toString() ?? '',
                    heureFin: creneau['heure_fin']?.toString() ?? '',
                    disponibilite: false,
                  ),
                );
              } else {
                print('‚ö†Ô∏è Format de cr√©neau invalide: $item');
                return Reservation.createDefault();
              }
            } catch (e) {
              print('‚ùå Erreur lors de la cr√©ation de la r√©servation: $e');
              print('‚ùå Donn√©es probl√©matiques: $item');
              return Reservation.createDefault();
            }
          }).where((r) => r.id != 0).toList();
        }
        // Si la r√©ponse est un objet avec une cl√© 'data' qui contient la liste
        else if (jsonResponse is Map && jsonResponse['data'] is List) {
          print('‚ÑπÔ∏è Format de r√©ponse d√©tect√©: Objet avec cl√© data');
          final reservationsData = jsonResponse['data'] as List;
          
          return reservationsData.map<Reservation>((item) {
            try {
              print('üìù Traitement de la r√©servation: $item');
              
              // Si le cr√©neau est inclus dans la r√©ponse
              if (item['creneau'] != null) {
                return Reservation(
                  id: item['id_reservation'] ?? 0,
                  idUtilisateur: item['id_utilisateur'] ?? 0,
                  idCreneau: item['id_creneau'] ?? 0,
                  dateReservation: item['date_reservation'] != null 
                      ? DateTime.tryParse(item['date_reservation'].toString()) ?? DateTime.now()
                      : DateTime.now(),
                  creneau: Creneau(
                    id: item['id_creneau'] ?? 0,
                    date: item['creneau']?['date_creneau']?.toString() ?? '',
                    heureDebut: item['creneau']?['heure_debut']?.toString() ?? '',
                    heureFin: item['creneau']?['heure_fin']?.toString() ?? '',
                    disponibilite: false,
                  ),
                );
              } else {
                // Si le cr√©neau n'est pas inclus, on cr√©e une r√©servation basique
                return Reservation(
                  id: item['id_reservation'] ?? 0,
                  idUtilisateur: item['id_utilisateur'] ?? 0,
                  idCreneau: item['id_creneau'] ?? 0,
                  dateReservation: item['date_reservation'] != null 
                      ? DateTime.tryParse(item['date_reservation'].toString()) ?? DateTime.now()
                      : DateTime.now(),
                );
              }
            } catch (e) {
              print('‚ùå Erreur lors de la cr√©ation de la r√©servation: $e');
              print('‚ùå Donn√©es probl√©matiques: $item');
              return Reservation.createDefault();
            }
          }).where((r) => r.id != 0).toList();
        } else {
          print('‚ö†Ô∏è Format de r√©ponse inattendu: $jsonResponse');
          return [];
        }
      } else {
        print('‚ùå Erreur API: ${response.statusCode} - ${response.body}');
        throw Exception('Erreur lors de la r√©cup√©ration des r√©servations (${response.statusCode})');
      }
    } catch (e) {
      print('‚ùå Erreur dans getMesReservations: $e');
      rethrow;
    }
  }
}